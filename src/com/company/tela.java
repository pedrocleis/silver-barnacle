/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pdi;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.List;
import java.awt.image.BufferedImage;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Naiara, Pedro e Ruan
 */
public class tela extends javax.swing.JFrame {
    
    File arquivo;
    BufferedImage img = null;
    File input = null;
    File output = null;
    File maskText = null;

    /**
     * Creates new form tela
     */
    public tela() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    public int checkMinMax (double input) {
        int output;
        if (Math.round(input) > 255) {
            output = 255;
        } else if (Math.round(input) < 0) {
            output = 0;
        } else {
            output = (int) Math.round(input);
        }

         return output;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnNegativoRGB = new javax.swing.JButton();
        foto = new javax.swing.JLabel();
        btnTrocarFoto = new javax.swing.JButton();
        btnBandaRcor = new javax.swing.JButton();
        btnBandaGcor = new javax.swing.JButton();
        btnBandaBcor = new javax.swing.JButton();
        btnConversaoRGB_YIQ_RGB = new javax.swing.JButton();
        btnNegativoY = new javax.swing.JButton();
        btnBandaRmono = new javax.swing.JButton();
        BandaRneg = new javax.swing.JButton();
        BandaGneg = new javax.swing.JButton();
        BandaBneg = new javax.swing.JButton();
        btnBandaGmono = new javax.swing.JButton();
        btnBandaBmono = new javax.swing.JButton();
        btnControleBrilho = new javax.swing.JButton();
        valorContrBrilho = new javax.swing.JTextField();
        btnFiltroMedia = new javax.swing.JButton();
        btnFiltroSobel = new javax.swing.JButton();
        btnFiltroMediana = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnNegativoRGB.setText("Negativo RGB");
        btnNegativoRGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNegativoRGBActionPerformed(evt);
            }
        });

        foto.setBorder(new javax.swing.border.MatteBorder(null));

        btnTrocarFoto.setText("Trocar foto");
        btnTrocarFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTrocarFotoActionPerformed(evt);
            }
        });

        btnBandaRcor.setText("Banda R colorida");
        btnBandaRcor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBandaRcorActionPerformed(evt);
            }
        });

        btnBandaGcor.setText("Banda G colorida");
        btnBandaGcor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBandaGcorActionPerformed(evt);
            }
        });

        btnBandaBcor.setText("Banda B colorida");
        btnBandaBcor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBandaBcorActionPerformed(evt);
            }
        });

        btnConversaoRGB_YIQ_RGB.setText("Conversão RGB-YIQ-RGB");
        btnConversaoRGB_YIQ_RGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConversaoRGB_YIQ_RGBActionPerformed(evt);
            }
        });

        btnNegativoY.setText("Negativo em Y");
        btnNegativoY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNegativoYActionPerformed(evt);
            }
        });

        btnBandaRmono.setText("Banda R monocromática");
        btnBandaRmono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBandaRmonoActionPerformed(evt);
            }
        });

        BandaRneg.setText("Banda R Negativo");
        BandaRneg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BandaRnegActionPerformed(evt);
            }
        });

        BandaGneg.setText("Banda G Negativo");
        BandaGneg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BandaGnegActionPerformed(evt);
            }
        });

        BandaBneg.setText("Banda B Negativo");
        BandaBneg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BandaBnegActionPerformed(evt);
            }
        });

        btnBandaGmono.setText("Banda G monocromática");
        btnBandaGmono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBandaGmonoActionPerformed(evt);
            }
        });

        btnBandaBmono.setText("Banda B monocromática");
        btnBandaBmono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBandaBmonoActionPerformed(evt);
            }
        });

        btnControleBrilho.setText("Controle de Brilho");
        btnControleBrilho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnControleBrilhoActionPerformed(evt);
            }
        });

        valorContrBrilho.setText("Insira um valor real positivo");

        btnFiltroMedia.setText("Filtro de Média");

        btnFiltroSobel.setText("Filtro de Sobel");

        btnFiltroMediana.setText("Filtro de Mediana");
        btnFiltroMediana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltroMedianaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(foto, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(btnTrocarFoto)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnNegativoRGB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnNegativoY)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnConversaoRGB_YIQ_RGB))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnBandaRmono, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnBandaGmono, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnBandaBmono, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(valorContrBrilho))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(btnControleBrilho)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnBandaRcor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BandaRneg))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnBandaGcor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BandaGneg))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnBandaBcor)
                                .addGap(8, 8, 8)
                                .addComponent(BandaBneg))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnFiltroMedia)
                                .addGap(18, 18, 18)
                                .addComponent(btnFiltroSobel))
                            .addComponent(btnFiltroMediana))))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnNegativoRGB)
                            .addComponent(btnNegativoY)
                            .addComponent(btnConversaoRGB_YIQ_RGB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBandaRmono)
                            .addComponent(btnBandaRcor)
                            .addComponent(BandaRneg))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnBandaGmono)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnBandaBmono)
                                    .addComponent(btnBandaBcor)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(BandaGneg)
                                    .addComponent(btnBandaGcor))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BandaBneg)))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(valorContrBrilho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnFiltroMedia)
                            .addComponent(btnFiltroSobel))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnFiltroMediana)
                            .addComponent(btnControleBrilho)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(foto, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnTrocarFoto)))
                .addGap(0, 40, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTrocarFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTrocarFotoActionPerformed
        JFileChooser fc = new JFileChooser(".\\src\\pdi\\imagens");
        
        fc.showOpenDialog(jPanel1);
        this.arquivo = fc.getSelectedFile();

        ImageIcon imagem = new ImageIcon(arquivo.getAbsolutePath());
        foto.setIcon(new ImageIcon(imagem.getImage().getScaledInstance(foto.getWidth(),foto.getHeight(), Image.SCALE_DEFAULT)));
        
        foto.repaint();
        
        this.revalidate();
        
        
    }//GEN-LAST:event_btnTrocarFotoActionPerformed

    private void btnNegativoRGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNegativoRGBActionPerformed
               
        try {
            input = this.arquivo;
            img = ImageIO.read(input);
            maskText = new File (".\\src\\pdi\\imagens\\mask.txt");
        } catch (IOException e){
            e.printStackTrace();
        }

        int width = img.getWidth();
        int height = img.getHeight();

        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                int pixel = img.getRGB(i,j);

                int r = 255 - (pixel>>16) & 0xff;
                int g = 255 - (pixel>>8) & 0xff;
                int b = 255 - pixel & 0xff;

                pixel = (r<<16) | (g<<8) | b;
                img.setRGB(i, j, pixel);
            }
        }

        try {
            output = new File (".\\src\\pdi\\imagens\\imagemProcessada.jpg");
            ImageIO.write(img, "jpg", output);
            ImageIcon imagem = new ImageIcon(output.getAbsolutePath());
            foto.setIcon(new ImageIcon(imagem.getImage().getScaledInstance(foto.getWidth(), foto.getHeight(), Image.SCALE_DEFAULT)));

            foto.repaint();
            
            this.revalidate();
                        
        } catch (IOException e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnNegativoRGBActionPerformed

    private void btnBandaRcorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBandaRcorActionPerformed
        
        try {
            input = this.arquivo;
            img = ImageIO.read(input);
            maskText = new File (".\\src\\pdi\\imagens\\mask.txt");
        } catch (IOException e){
            e.printStackTrace();
        }

        int width = img.getWidth();
        int height = img.getHeight();

        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                int pixel = img.getRGB(i,j);

                int r = 255 & (pixel>>16) & 0xff;
                int g = 0 & (pixel>>8) & 0xff;
                int b = 0 & pixel & 0xff;
                
                pixel = (r<<16) | (g<<8) | b;
                img.setRGB(i, j, pixel);
            }
        }

        try {
            output = new File (".\\src\\pdi\\imagens\\imagemProcessada.jpg");
            ImageIO.write(img, "jpg", output);
            ImageIcon imagem = new ImageIcon(output.getAbsolutePath());
            foto.setIcon(new ImageIcon(imagem.getImage().getScaledInstance(foto.getWidth(),foto.getHeight(), Image.SCALE_DEFAULT)));
        
            foto.repaint();
        
            this.revalidate();
            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnBandaRcorActionPerformed

    private void btnBandaGcorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBandaGcorActionPerformed
        
        try {
            input = this.arquivo;
            img = ImageIO.read(input);
            maskText = new File (".\\src\\pdi\\imagens\\mask.txt");
        } catch (IOException e){
            e.printStackTrace();
        }

        int width = img.getWidth();
        int height = img.getHeight();

        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                int pixel = img.getRGB(i,j);

                int r = 0 & (pixel>>16) & 0xff;
                int g = 255 & (pixel>>8) & 0xff;
                int b = 0 & pixel & 0xff;
                                
                pixel = (r<<16) | (g<<8) | b;
                img.setRGB(i, j, pixel);
            }
        }

        try {
            output = new File(".\\src\\pdi\\imagens\\imagemProcessada.jpg");
            ImageIO.write(img, "jpg", output);
            ImageIcon imagem = new ImageIcon(output.getAbsolutePath());
            foto.setIcon(new ImageIcon(imagem.getImage().getScaledInstance(foto.getWidth(), foto.getHeight(), Image.SCALE_DEFAULT)));

            foto.repaint();

            this.revalidate();
            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnBandaGcorActionPerformed

    private void btnBandaBcorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBandaBcorActionPerformed
        
        try {
            input = this.arquivo;
            img = ImageIO.read(input);
            maskText = new File (".\\src\\pdi\\imagens\\mask.txt");
        } catch (IOException e){
            e.printStackTrace();
        }

        int width = img.getWidth();
        int height = img.getHeight();

        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                int pixel = img.getRGB(i,j);

                int r = 0 & (pixel>>16) & 0xff;
                int g = 0 & (pixel>>8) & 0xff;
                int b = 255 & pixel & 0xff;
                                
                pixel = (r<<16) | (g<<8) | b;
                img.setRGB(i, j, pixel);
            }
        }

        try {
            output = new File (".\\src\\pdi\\imagens\\imagemProcessada.jpg");
            ImageIO.write(img, "jpg", output);
            ImageIcon imagem = new ImageIcon(output.getAbsolutePath());
            foto.setIcon(new ImageIcon(imagem.getImage().getScaledInstance(foto.getWidth(),foto.getHeight(), Image.SCALE_DEFAULT)));
        
            foto.repaint();
        
            this.revalidate();
            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnBandaBcorActionPerformed

    private void btnBandaRmonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBandaRmonoActionPerformed
        
        try {
            input = this.arquivo;
            img = ImageIO.read(input);
            maskText = new File (".\\src\\pdi\\imagens\\mask.txt");
        } catch (IOException e){
            e.printStackTrace();
        }

        int width = img.getWidth();
        int height = img.getHeight();

        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                int pixel = img.getRGB(i,j);

                int r = 255 & (pixel>>16) & 0xff;
                int g = 0 & (pixel>>8) & 0xff;
                int b = 0 & pixel & 0xff;
                
                pixel = (r<<16) | (g<<8) | b;                 
                
                img.setRGB(i, j, pixel);
            }
        }

        BufferedImage grayFrame = 
        new BufferedImage(width, height, BufferedImage.TYPE_BYTE_GRAY);
        
        WritableRaster raster = grayFrame.getRaster();

        for(int x = 0; x < raster.getWidth(); x++) {
            for(int y = 0; y < raster.getHeight(); y++){
                int argb = img.getRGB(x,y);
                int r = (argb >> 16) & 0xff;
                int g = (argb >>  8) & 0xff;
                int b = (argb      ) & 0xff;

                int l = (int) (.299 * r + .587 * g + .114 * b);
                raster.setSample(x, y, 0, l);
            }
        }
        
        try {
            output = new File (".\\src\\pdi\\imagens\\imagemProcessada.jpg");
            ImageIO.write(grayFrame, "jpg", output);
            ImageIcon imagem = new ImageIcon(output.getAbsolutePath());
            foto.setIcon(new ImageIcon(imagem.getImage().getScaledInstance(foto.getWidth(),foto.getHeight(), Image.SCALE_DEFAULT)));
        
            foto.repaint();
        
            this.revalidate();
            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnBandaRmonoActionPerformed

    private void btnNegativoYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNegativoYActionPerformed
       
        try {
            input = this.arquivo;
            img = ImageIO.read(input);
            maskText = new File(".\\src\\pdi\\imagens\\mask.txt");
        } catch (IOException e) {
            e.printStackTrace();
        }

        int width = img.getWidth();
        int height = img.getHeight();

        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                int pixel = img.getRGB(i, j);

                int r = (pixel >> 16) & 0xff;
                int g = (pixel >> 8) & 0xff;
                int b = pixel & 0xff;

                double valorY = 0.299*r + 0.587*g + 0.114*b;
                double valorI = 0.596*r - 0.274*g - 0.322*b;
                double valorQ = 0.211*r - 0.523*g + 0.312*b;

                double negativoY = 255 - valorY;

                r = checkMinMax(negativoY + 0.956*valorI + 0.621*valorQ);
                g = checkMinMax(negativoY - 0.272*valorI - 0.647*valorQ);
                b = checkMinMax(negativoY - 1.106*valorI + 1.703*valorQ);

                pixel = (r << 16) | (g << 8) | b;
                img.setRGB(i, j, pixel);
            }
        }

        try {
            output = new File(".\\src\\pdi\\imagens\\imagemProcessada.jpg");
            ImageIO.write(img, "jpg", output);
            ImageIcon imagem = new ImageIcon(output.getAbsolutePath());
            foto.setIcon(new ImageIcon(imagem.getImage().getScaledInstance(foto.getWidth(), foto.getHeight(), Image.SCALE_DEFAULT)));

            foto.repaint();

            this.revalidate();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnNegativoYActionPerformed

    private void BandaRnegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BandaRnegActionPerformed
        
        try {
            input = this.arquivo;
            img = ImageIO.read(input);
            maskText = new File (".\\src\\pdi\\imagens\\mask.txt");
        } catch (IOException e){
            e.printStackTrace();
        }

        int width = img.getWidth();
        int height = img.getHeight();

        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                int pixel = img.getRGB(i,j);

                int r = 255 - (pixel>>16) & 0xff;
                int g = (pixel>>8) & 0xff;
                int b = pixel & 0xff;

                pixel = (r<<16)| (g<<8) | b;
                img.setRGB(i, j, pixel);
            }
        }

        try {
            output = new File (".\\src\\pdi\\imagens\\imagemProcessada.jpg");
            ImageIO.write(img, "jpg", output);
            ImageIcon imagem = new ImageIcon(output.getAbsolutePath());
            foto.setIcon(new ImageIcon(imagem.getImage().getScaledInstance(foto.getWidth(),foto.getHeight(), Image.SCALE_DEFAULT)));
        
            foto.repaint();
        
            this.revalidate();
            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_BandaRnegActionPerformed

    private void btnConversaoRGB_YIQ_RGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConversaoRGB_YIQ_RGBActionPerformed
       
        try {
            input = this.arquivo;
            img = ImageIO.read(input);
            maskText = new File(".\\src\\pdi\\imagens\\mask.txt");
        } catch (IOException e) {
            e.printStackTrace();
        }

        int width = img.getWidth();
        int height = img.getHeight();

        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                int pixel = img.getRGB(i, j);

                int r = (pixel >> 16) & 0xff;
                int g = (pixel >> 8) & 0xff;
                int b = pixel & 0xff;

                double valorY = 0.299*r + 0.587*g + 0.114*b;
                double valorI = 0.596*r - 0.274*g - 0.322*b;
                double valorQ = 0.211*r - 0.523*g + 0.312*b;              

                r = checkMinMax(1.000*valorY + 0.956*valorI + 0.621*valorQ);
                g = checkMinMax(1.000*valorY - 0.272*valorI - 0.647*valorQ);
                b = checkMinMax(1.000*valorY - 1.106*valorI + 1.703*valorQ);

                pixel = (r << 16) | (g << 8) | b;
                img.setRGB(i, j, pixel);
            }
        }

        try {
            output = new File(".\\src\\pdi\\imagens\\imagemProcessada.jpg");
            ImageIO.write(img, "jpg", output);
            ImageIcon imagem = new ImageIcon(output.getAbsolutePath());
            foto.setIcon(new ImageIcon(imagem.getImage().getScaledInstance(foto.getWidth(), foto.getHeight(), Image.SCALE_DEFAULT)));

            foto.repaint();

            this.revalidate();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnConversaoRGB_YIQ_RGBActionPerformed

    private void BandaGnegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BandaGnegActionPerformed
        
        try {
            input = this.arquivo;
            img = ImageIO.read(input);
            maskText = new File (".\\src\\pdi\\imagens\\mask.txt");
        } catch (IOException e){
            e.printStackTrace();
        }

        int width = img.getWidth();
        int height = img.getHeight();

        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                int pixel = img.getRGB(i,j);

                int r = (pixel>>16) & 0xff;
                int g = 255 - (pixel>>8) & 0xff;
                int b = pixel & 0xff;

                pixel = (r<<16)| (g<<8) | b;
                img.setRGB(i, j, pixel);
            }
        }

        try {
            output = new File (".\\src\\pdi\\imagens\\imagemProcessada.jpg");
            ImageIO.write(img, "jpg", output);
            ImageIcon imagem = new ImageIcon(output.getAbsolutePath());
            foto.setIcon(new ImageIcon(imagem.getImage().getScaledInstance(foto.getWidth(),foto.getHeight(), Image.SCALE_DEFAULT)));
        
            foto.repaint();
        
            this.revalidate();
            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_BandaGnegActionPerformed

    private void BandaBnegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BandaBnegActionPerformed
       
        try {
            input = this.arquivo;
            img = ImageIO.read(input);
            maskText = new File (".\\src\\pdi\\imagens\\mask.txt");
        } catch (IOException e){
            e.printStackTrace();
        }

        int width = img.getWidth();
        int height = img.getHeight();

        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                int pixel = img.getRGB(i,j);

                int r = (pixel>>16) & 0xff;
                int g = (pixel>>8) & 0xff;
                int b = 255 - pixel & 0xff;

                pixel = (r<<16)| (g<<8) | b;
                img.setRGB(i, j, pixel);
            }
        }

        try {
            output = new File (".\\src\\pdi\\imagens\\imagemProcessada.jpg");
            ImageIO.write(img, "jpg", output);
            ImageIcon imagem = new ImageIcon(output.getAbsolutePath());
            foto.setIcon(new ImageIcon(imagem.getImage().getScaledInstance(foto.getWidth(),foto.getHeight(), Image.SCALE_DEFAULT)));
        
            foto.repaint();
        
            this.revalidate();
            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_BandaBnegActionPerformed

    private void btnBandaGmonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBandaGmonoActionPerformed
        
        try {
            input = this.arquivo;
            img = ImageIO.read(input);
            maskText = new File (".\\src\\pdi\\imagens\\mask.txt");
        } catch (IOException e){
            e.printStackTrace();
        }

        int width = img.getWidth();
        int height = img.getHeight();

        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                int pixel = img.getRGB(i,j);

                int r = 0 & (pixel>>16) & 0xff;
                int g = 255 & (pixel>>8) & 0xff;
                int b = 0 & pixel & 0xff;
                
                pixel = (r<<16) | (g<<8) | b;                 
                
                img.setRGB(i, j, pixel);
            }
        }

        BufferedImage grayFrame = 
        new BufferedImage(width, height, BufferedImage.TYPE_BYTE_GRAY);
        
        WritableRaster raster = grayFrame.getRaster();

        for(int x = 0; x < raster.getWidth(); x++) {
            for(int y = 0; y < raster.getHeight(); y++){
                int argb = img.getRGB(x,y);
                int r = (argb >> 16) & 0xff;
                int g = (argb >>  8) & 0xff;
                int b = (argb      ) & 0xff;

                int l = (int) (.299 * r + .587 * g + .114 * b);
                raster.setSample(x, y, 0, l);
            }
        }
        
        try {
            output = new File (".\\src\\pdi\\imagens\\imagemProcessada.jpg");
            ImageIO.write(grayFrame, "jpg", output);
            ImageIcon imagem = new ImageIcon(output.getAbsolutePath());
            foto.setIcon(new ImageIcon(imagem.getImage().getScaledInstance(foto.getWidth(),foto.getHeight(), Image.SCALE_DEFAULT)));
        
            foto.repaint();
        
            this.revalidate();
            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnBandaGmonoActionPerformed

    private void btnBandaBmonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBandaBmonoActionPerformed
        
        try {
            input = this.arquivo;
            img = ImageIO.read(input);
            maskText = new File (".\\src\\pdi\\imagens\\mask.txt");
        } catch (IOException e){
            e.printStackTrace();
        }

        int width = img.getWidth();
        int height = img.getHeight();

        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                int pixel = img.getRGB(i,j);

                int r = 0 & (pixel>>16) & 0xff;
                int g = 0 & (pixel>>8) & 0xff;
                int b = 255 & pixel & 0xff;
                
                pixel = (r<<16) | (g<<8) | b;
                
                img.setRGB(i, j, pixel);
            }
        }

        BufferedImage grayFrame = 
        new BufferedImage(width, height, BufferedImage.TYPE_BYTE_GRAY);
        
        WritableRaster raster = grayFrame.getRaster();

        for(int x = 0; x < raster.getWidth(); x++) {
            for(int y = 0; y < raster.getHeight(); y++){
                int argb = img.getRGB(x,y);
                int r = (argb >> 16) & 0xff;
                int g = (argb >>  8) & 0xff;
                int b = (argb      ) & 0xff;

                int l = (int) (.299 * r + .587 * g + .114 * b);
                raster.setSample(x, y, 0, l);
            }
        }
        
        try {
            output = new File (".\\src\\pdi\\imagens\\imagemProcessada.jpg");
            ImageIO.write(grayFrame, "jpg", output);
            ImageIcon imagem = new ImageIcon(output.getAbsolutePath());
            foto.setIcon(new ImageIcon(imagem.getImage().getScaledInstance(foto.getWidth(),foto.getHeight(), Image.SCALE_DEFAULT)));
        
            foto.repaint();
        
            this.revalidate();
            
            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnBandaBmonoActionPerformed

    private void btnControleBrilhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnControleBrilhoActionPerformed
                
        float c = Float.parseFloat(valorContrBrilho.getText());
        
        if(c < 0){
            JOptionPane.showMessageDialog(null, "O valor deve ser positivo!");
        }else{
            try {
                
                input = new File(".\\src\\pdi\\imagens\\imagemProcessada.jpg");
                
                img = ImageIO.read(input);
                maskText = new File(".\\src\\pdi\\imagens\\mask.txt");
            } catch (IOException e) {
                e.printStackTrace();
            }

            int width = img.getWidth();
            int height = img.getHeight();

            for (int i = 0; i < width; i++) {
                for (int j = 0; j < height; j++) {
                    int pixel = img.getRGB(i, j);

                    int r = (pixel >> 16) & 0xff;
                    int g = (pixel >> 8) & 0xff;
                    int b = pixel & 0xff;                      

                    r = checkMinMax(r*c);
                    g = checkMinMax(g*c);
                    b = checkMinMax(b*c);

                    pixel = (r << 16) | (g << 8) | b;
                    img.setRGB(i, j, pixel);
                }
            }

            try {
                output = new File(".\\src\\pdi\\imagens\\imagemProcessada.jpg");
                ImageIO.write(img, "jpg", output);
                ImageIcon imagem = new ImageIcon(output.getAbsolutePath());
                foto.setIcon(new ImageIcon(imagem.getImage().getScaledInstance(foto.getWidth(), foto.getHeight(), Image.SCALE_DEFAULT)));

                foto.repaint();

                this.revalidate();

            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnControleBrilhoActionPerformed

    private void btnFiltroMedianaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltroMedianaActionPerformed
        try {
            input = this.arquivo;
            img = ImageIO.read(input);
            maskText = new File (".\\src\\pdi\\imagens\\mask.txt");
        } catch (IOException e){
            e.printStackTrace();
        }

        ArrayList<Integer> list = null;
        
        try {
            Scanner scanner = new Scanner(maskText);
            list = new ArrayList<>();
            while(scanner.hasNext()){
                if(scanner.hasNextInt()){
                    list.add(scanner.nextInt());
                } else {
                    scanner.next();
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(tela.class.getName()).log(Level.SEVERE, null, ex);
        }
        
                
        int width = img.getWidth();
        int height = img.getHeight();

        int maskWidth = list.get(0);
        int maskHeight = list.get(0);
        
       System.out.println(list.get(0));
        
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                
                int pixel = img.getRGB(i,j);

                int r = (pixel>>16) & 0xff;
                int g = (pixel>>8) & 0xff;
                int b = pixel & 0xff;
                
                pixel = (r<<16) | (g<<8) | b;
                
                img.setRGB(i, j, pixel);
            }
        }
        
        try {
            output = new File (".\\src\\pdi\\imagens\\imagemProcessada.jpg");
            ImageIO.write(img, "jpg", output);
            ImageIcon imagem = new ImageIcon(output.getAbsolutePath());
            foto.setIcon(new ImageIcon(imagem.getImage().getScaledInstance(foto.getWidth(),foto.getHeight(), Image.SCALE_DEFAULT)));
        
            foto.repaint();
        
            this.revalidate();
            
            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnFiltroMedianaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new tela().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BandaBneg;
    private javax.swing.JButton BandaGneg;
    private javax.swing.JButton BandaRneg;
    private javax.swing.JButton btnBandaBcor;
    private javax.swing.JButton btnBandaBmono;
    private javax.swing.JButton btnBandaGcor;
    private javax.swing.JButton btnBandaGmono;
    private javax.swing.JButton btnBandaRcor;
    private javax.swing.JButton btnBandaRmono;
    private javax.swing.JButton btnControleBrilho;
    private javax.swing.JButton btnConversaoRGB_YIQ_RGB;
    private javax.swing.JButton btnFiltroMedia;
    private javax.swing.JButton btnFiltroMediana;
    private javax.swing.JButton btnFiltroSobel;
    private javax.swing.JButton btnNegativoRGB;
    private javax.swing.JButton btnNegativoY;
    private javax.swing.JButton btnTrocarFoto;
    private javax.swing.JLabel foto;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField valorContrBrilho;
    // End of variables declaration//GEN-END:variables
}
